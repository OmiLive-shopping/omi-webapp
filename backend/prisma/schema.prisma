generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  firstName String?
  lastName  String?
  email     String    @unique
  username  String    @unique
  password  String?
  isAdmin   Boolean   @default(false)
  streamKey String    @unique @default(cuid())
  roleId    String?
  active    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  role      Roles?    @relation(fields: [roleId], references: [id])
  wishlist  Product[] @relation("UserWishlist")
  streams   Stream[]
  comments  Comment[]

  @@index([email])
  @@index([username])
  @@index([streamKey])
}

model Roles {
  id     String @id @default(uuid())
  name   String
  active Int    @default(1) @db.SmallInt
  user   User[]
}

model Product {
  id               String    @id @default(uuid())
  name             String
  imageUrl         String?
  description      String?   @db.Text
  couponCode       String?
  couponExpiration DateTime?
  url              String?
  public           Boolean   @default(true)
  active           Boolean   @default(true)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @default(now()) @updatedAt
  wishlistedBy     User[]    @relation("UserWishlist")
  streams          StreamProduct[]

  @@index([public])
  @@index([active])
}

model Stream {
  id          String    @id @default(uuid())
  title       String
  description String?   @db.Text
  scheduled   DateTime
  userId      String
  isLive      Boolean   @default(false)
  viewerCount Int       @default(0)
  startedAt   DateTime?
  endedAt     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  products    StreamProduct[]
  comments    Comment[]

  @@index([userId])
  @@index([isLive])
  @@index([scheduled])
}

model StreamProduct {
  id        String   @id @default(uuid())
  streamId  String
  productId String
  order     Int      @default(0)
  stream    Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([streamId, productId])
  @@index([streamId])
  @@index([productId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String   @db.Text
  userId    String
  streamId  String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  stream    Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)

  @@index([streamId])
  @@index([userId])
}
