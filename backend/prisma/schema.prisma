generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum UserRole {
  user
  streamer
  brand
  admin
}

model User {
  id                     String            @id @default(uuid())
  firstName              String?
  lastName               String?
  email                  String            @unique
  password               String?
  active                 Boolean           @default(true)
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @default(now()) @updatedAt
  avatarUrl              String?
  bio                    String?
  emailVerified          Boolean           @default(false)
  image                  String?
  isAdmin                Boolean           @default(false)
  name                   String?
  role                   UserRole          @default(user)
  streamKey              String            @unique @default(cuid())
  username               String            @unique
  location               String?
  socialLinks            Json?
  publicProfile          Boolean           @default(true)
  accounts               Account[]
  brand                  Brand?
  cart                   Cart?
  moderatorActions       ChatModeration[]  @relation("ModeratorActions")
  moderatedActions       ChatModeration[]  @relation("ModeratedUsers")
  following              Follow[]          @relation("UserFollowing")
  followers              Follow[]          @relation("UserFollowers")
  messageReactions       MessageReaction[]
  orders                 Order[]
  productAudits          ProductAudit[]
  refreshTokens          RefreshToken[]
  sessions               Session[]
  streams                Stream[]
  streamMessages         StreamMessage[]
  streamModeratorAddedBy StreamModerator[] @relation("StreamModeratorAddedBy")
  streamModeratorFor     StreamModerator[] @relation("StreamModeratorUser")
  streamViewers          StreamViewer[]
  viewerAnalytics        ViewerAnalytics[]
  wishlist               Product[]         @relation("UserWishlist")

  @@index([email])
  @@index([username])
  @@index([streamKey])
  @@index([role])
}

model Brand {
  id                 String    @id @default(uuid())
  userId             String    @unique
  companyName        String
  companyDescription String?
  websiteUrl         String?
  businessEmail      String
  businessPhone      String?
  verified           Boolean   @default(false)
  approvalStatus     String    @default("pending")
  appliedAt          DateTime  @default(now())
  approvedAt         DateTime?
  rejectedAt         DateTime?
  rejectionReason    String?
  slug               String?   @unique
  socialLinks        Json?
  logoUrl            String?
  coverImageUrl      String?
  location           String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now()) @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  products           Product[] @relation("BrandProducts")

  @@index([userId])
  @@index([approvalStatus])
  @@index([verified])
  @@index([approvalStatus, verified])
  @@index([slug])
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  slug        String    @unique
  description String?
  imageUrl    String?
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  products    Product[]
  streams     Stream[]

  @@index([slug])
  @@index([active])
}

model Product {
  id               String          @id @default(uuid())
  name             String
  imageUrl         String?
  images           String[]        @default([])
  description      String?
  price            Float           @default(0)
  originalPrice    Float?
  couponCode       String?
  couponExpiration DateTime?
  url              String?
  public           Boolean         @default(true)
  active           Boolean         @default(true)
  inStock          Boolean         @default(true)
  stockCount       Int?
  featured         Boolean         @default(false)
  categoryId       String?
  tags             String[]        @default([])
  rating           Float?
  reviewCount      Int             @default(0)
  brandId          String?
  approvalStatus   String          @default("pending")
  approvedAt       DateTime?
  rejectedAt       DateTime?
  rejectionReason  String?
  deletedAt        DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @default(now()) @updatedAt
  cartItems        CartItem[]
  orderItems       OrderItem[]
  brand            Brand?          @relation("BrandProducts", fields: [brandId], references: [id])
  category         Category?       @relation(fields: [categoryId], references: [id])
  audits           ProductAudit[]
  streams          StreamProduct[]
  wishlistedBy     User[]          @relation("UserWishlist")

  @@index([public])
  @@index([active])
  @@index([categoryId])
  @@index([featured])
  @@index([inStock])
  @@index([brandId, approvalStatus, active])
  @@index([approvalStatus])
  @@index([deletedAt])
}

model ProductAudit {
  id            String   @id @default(uuid())
  productId     String
  userId        String
  action        String
  fieldName     String?
  previousValue String?
  newValue      String?
  reason        String?
  metadata      Json?
  createdAt     DateTime @default(now())
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id])

  @@index([productId])
  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

model Stream {
  id              String                @id @default(uuid())
  title           String
  description     String?
  scheduled       DateTime
  userId          String
  isLive          Boolean               @default(false)
  viewerCount     Int                   @default(0)
  startedAt       DateTime?
  endedAt         DateTime?
  thumbnailUrl    String?
  streamUrl       String?
  streamKey       String?               @unique @default(cuid())
  vdoRoomId       String?               @unique
  categoryId      String?
  tags            String[]              @default([])
  status          String                @default("scheduled")
  slowModeDelay   Int                   @default(0)
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @default(now()) @updatedAt
  moderations     ChatModeration[]
  category        Category?             @relation(fields: [categoryId], references: [id])
  user            User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  analytics       StreamAnalytics[]
  streamMessages  StreamMessage[]
  moderators      StreamModerator[]
  products        StreamProduct[]
  qualityEvents   StreamQualityEvent[]
  realtimeStats   StreamRealtimeStats[]
  streamViewers   StreamViewer[]
  viewerAnalytics ViewerAnalytics[]

  @@index([userId])
  @@index([isLive])
  @@index([scheduled])
  @@index([categoryId])
  @@index([status])
  @@index([streamKey])
}

model StreamProduct {
  id        String  @id @default(uuid())
  streamId  String
  productId String
  order     Int     @default(0)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  stream    Stream  @relation(fields: [streamId], references: [id], onDelete: Cascade)

  @@unique([streamId, productId])
  @@index([streamId])
  @@index([productId])
}

model StreamMessage {
  id        String            @id @default(uuid())
  content   String
  userId    String
  streamId  String
  username  String?
  type      String            @default("message")
  subType   String?
  metadata  Json?
  isPinned  Boolean           @default(false)
  isDeleted Boolean           @default(false)
  replyToId String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @default(now()) @updatedAt
  reactions MessageReaction[]
  replyTo   StreamMessage?    @relation("StreamMessageReplies", fields: [replyToId], references: [id])
  replies   StreamMessage[]   @relation("StreamMessageReplies")
  stream    Stream            @relation(fields: [streamId], references: [id], onDelete: Cascade)
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([streamId])
  @@index([userId])
  @@index([type])
  @@index([isPinned])
  @@index([createdAt])
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]

  @@index([userId])
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
  @@index([cartId])
  @@index([productId])
}

model Order {
  id              String      @id @default(uuid())
  orderNumber     String      @unique @default(cuid())
  userId          String
  status          String      @default("pending")
  paymentStatus   String      @default("unpaid")
  paymentMethod   String?
  subtotal        Float
  tax             Float       @default(0)
  shipping        Float       @default(0)
  total           Float
  shippingAddress Json?
  billingAddress  Json?
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @default(now()) @updatedAt
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items           OrderItem[]

  @@index([userId])
  @@index([orderNumber])
  @@index([status])
  @@index([paymentStatus])
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  total     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model StreamViewer {
  id        String    @id @default(uuid())
  streamId  String
  userId    String?
  sessionId String
  ipAddress String?
  userAgent String?
  location  String?
  joinedAt  DateTime  @default(now())
  leftAt    DateTime?
  stream    Stream    @relation(fields: [streamId], references: [id], onDelete: Cascade)
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([streamId, sessionId])
  @@index([streamId])
  @@index([userId])
  @@index([joinedAt])
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@index([expiresAt])
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model MessageReaction {
  id        String        @id @default(uuid())
  messageId String
  userId    String
  emoji     String
  createdAt DateTime      @default(now())
  message   StreamMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, emoji])
  @@index([messageId])
  @@index([userId])
}

model ChatModeration {
  id          String    @id @default(uuid())
  streamId    String
  userId      String
  moderatorId String
  action      String
  reason      String?
  duration    Int?
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  moderator   User      @relation("ModeratorActions", fields: [moderatorId], references: [id], onDelete: Cascade)
  stream      Stream    @relation(fields: [streamId], references: [id], onDelete: Cascade)
  user        User      @relation("ModeratedUsers", fields: [userId], references: [id], onDelete: Cascade)

  @@index([streamId])
  @@index([userId])
  @@index([expiresAt])
  @@index([action])
}

model StreamModerator {
  id          String   @id @default(uuid())
  streamId    String
  userId      String
  addedBy     String
  createdAt   DateTime @default(now())
  addedByUser User     @relation("StreamModeratorAddedBy", fields: [addedBy], references: [id], onDelete: Cascade)
  stream      Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  user        User     @relation("StreamModeratorUser", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([streamId, userId])
  @@index([streamId])
  @@index([userId])
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@index([expiresAt])
}

model Account {
  id                    String    @id @default(uuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @default(now()) @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@index([userId])
}

model Verification {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@unique([identifier, value])
  @@index([identifier])
  @@index([expiresAt])
}

model StreamAnalytics {
  id                String   @id @default(uuid())
  streamId          String
  timestamp         DateTime @default(now())
  intervalType      String
  intervalStart     DateTime
  intervalEnd       DateTime
  uniqueViewers     Int      @default(0)
  peakViewers       Int      @default(0)
  averageViewers    Float    @default(0)
  totalViewTime     Int      @default(0)
  averageViewTime   Float    @default(0)
  averageFps        Float    @default(0)
  minFps            Float    @default(0)
  maxFps            Float    @default(0)
  averageBitrate    Float    @default(0)
  minBitrate        Float    @default(0)
  maxBitrate        Float    @default(0)
  averageResolution String?
  averageLatency    Float    @default(0)
  maxLatency        Float    @default(0)
  averagePacketLoss Float    @default(0)
  maxPacketLoss     Float    @default(0)
  averageJitter     Float    @default(0)
  connectionScore   Float    @default(100)
  qualityRating     String   @default("good")
  reconnectCount    Int      @default(0)
  totalBytesOut     BigInt   @default(0)
  totalBytesIn      BigInt   @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt
  stream            Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)

  @@unique([streamId, intervalType, intervalStart])
  @@index([streamId])
  @@index([intervalType])
  @@index([intervalStart])
  @@index([timestamp])
}

model StreamRealtimeStats {
  id                String   @id @default(uuid())
  streamId          String
  timestamp         DateTime @default(now())
  viewerCount       Int      @default(0)
  fps               Float    @default(0)
  resolution        String?
  bitrate           Float    @default(0)
  audioLevel        Float    @default(0)
  audioDropouts     Int      @default(0)
  latency           Float    @default(0)
  packetLoss        Float    @default(0)
  jitter            Float    @default(0)
  uploadSpeed       Float    @default(0)
  downloadSpeed     Float    @default(0)
  connectionState   String   @default("connected")
  connectionQuality String   @default("good")
  isAudioMuted      Boolean  @default(false)
  isVideoHidden     Boolean  @default(false)
  isScreenSharing   Boolean  @default(false)
  isRecording       Boolean  @default(false)
  createdAt         DateTime @default(now())
  stream            Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)

  @@index([streamId])
  @@index([timestamp])
  @@index([createdAt])
}

model StreamQualityEvent {
  id             String    @id @default(uuid())
  streamId       String
  timestamp      DateTime  @default(now())
  eventType      String
  severity       String
  metric         String
  previousValue  Float?
  currentValue   Float?
  threshold      Float?
  message        String?
  details        Json?
  resolved       Boolean   @default(false)
  resolvedAt     DateTime?
  resolutionTime Int?
  createdAt      DateTime  @default(now())
  stream         Stream    @relation(fields: [streamId], references: [id], onDelete: Cascade)

  @@index([streamId])
  @@index([eventType])
  @@index([severity])
  @@index([timestamp])
  @@index([resolved])
}

model ViewerAnalytics {
  id                String    @id @default(uuid())
  streamId          String
  userId            String?
  sessionId         String
  joinedAt          DateTime
  leftAt            DateTime?
  totalWatchTime    Int       @default(0)
  chatMessageCount  Int       @default(0)
  reactionCount     Int       @default(0)
  averageQuality    String?
  qualityChanges    Int       @default(0)
  bufferingTime     Int       @default(0)
  bufferingEvents   Int       @default(0)
  averageLatency    Float     @default(0)
  averagePacketLoss Float     @default(0)
  reconnectCount    Int       @default(0)
  deviceType        String?
  browser           String?
  os                String?
  location          String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt
  stream            Stream    @relation(fields: [streamId], references: [id], onDelete: Cascade)
  user              User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([streamId, sessionId])
  @@index([streamId])
  @@index([userId])
  @@index([sessionId])
  @@index([joinedAt])
}
