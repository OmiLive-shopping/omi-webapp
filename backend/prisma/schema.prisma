generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                   String              @id @default(uuid())
  name                 String?
  email                String              @unique
  emailVerified        Boolean             @default(false)
  image                String?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @default(now()) @updatedAt
  
  // Better Auth role field
  role                 String              @default("user")
  
  // Additional fields from original schema
  firstName            String?
  lastName             String?
  password             String?
  roleId               String?
  active               Boolean             @default(true)
  isAdmin              Boolean             @default(false)
  streamKey            String              @unique @default(cuid())
  username             String              @unique
  avatarUrl            String?
  bio                  String?
  
  // Profile fields
  location             String?
  socialLinks          Json?               // Store as JSON for flexibility { twitter: "", instagram: "", etc. }
  publicProfile        Boolean             @default(true)

  streamMessages       StreamMessage[]
  streams              Stream[]
  roleRelation         Roles?              @relation(fields: [roleId], references: [id])
  wishlist             Product[]           @relation("UserWishlist")
  cart                 Cart?
  orders               Order[]
  streamViewers        StreamViewer[]
  refreshTokens        RefreshToken[]
  followers            Follow[]            @relation("UserFollowers")
  following            Follow[]            @relation("UserFollowing")
  messageReactions     MessageReaction[]
  moderatedActions     ChatModeration[]    @relation("ModeratedUsers")
  moderatorActions     ChatModeration[]    @relation("ModeratorActions")
  streamModeratorFor   StreamModerator[]   @relation("StreamModeratorUser")
  streamModeratorAddedBy StreamModerator[] @relation("StreamModeratorAddedBy")
  sessions             Session[]
  accounts             Account[]
  viewerAnalytics      ViewerAnalytics[]
  brand                Brand?
  productAudits        ProductAudit[]

  @@index([email])
  @@index([username])
  @@index([streamKey])
  @@index([role])
  @@index([publicProfile])
}

model Roles {
  id     String @id @default(uuid())
  name   String
  active Int    @default(1) @db.SmallInt
  user   User[]
}

model Brand {
  id                  String    @id @default(uuid())
  userId              String    @unique
  companyName         String
  companyDescription  String?
  websiteUrl          String?
  businessEmail       String
  businessPhone       String?
  verified            Boolean   @default(false)
  approvalStatus      String    @default("pending") // pending, approved, rejected
  appliedAt           DateTime  @default(now())
  approvedAt          DateTime?
  rejectedAt          DateTime?
  rejectionReason     String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @default(now()) @updatedAt

  // Profile fields
  slug                String?   @unique
  logoUrl             String?
  coverImageUrl       String?
  location            String?
  socialLinks         Json?     // Store as JSON for flexibility { twitter: "", linkedin: "", etc. }

  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  products            Product[] @relation("BrandProducts")

  @@index([userId])
  @@index([approvalStatus])
  @@index([verified])
  @@index([approvalStatus, verified])
  @@index([slug])
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  slug        String    @unique
  description String?
  imageUrl    String?
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  products    Product[]
  streams     Stream[]

  @@index([slug])
  @@index([active])
}

model Product {
  id               String          @id @default(uuid())
  name             String
  imageUrl         String?
  images           String[]        @default([])
  description      String?
  price            Float           @default(0)
  originalPrice    Float?
  couponCode       String?
  couponExpiration DateTime?
  url              String?
  public           Boolean         @default(true)
  active           Boolean         @default(true)
  inStock          Boolean         @default(true)
  stockCount       Int?
  featured         Boolean         @default(false)
  categoryId       String?
  tags             String[]        @default([])
  rating           Float?
  reviewCount      Int             @default(0)
  
  // Brand ownership and approval
  brandId          String?
  approvalStatus   String          @default("pending") // pending, approved, rejected
  approvedAt       DateTime?
  rejectedAt       DateTime?
  rejectionReason  String?
  deletedAt        DateTime?       // Soft delete support
  
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @default(now()) @updatedAt
  category         Category?       @relation(fields: [categoryId], references: [id])
  brand            Brand?          @relation("BrandProducts", fields: [brandId], references: [id])
  streams          StreamProduct[]
  wishlistedBy     User[]          @relation("UserWishlist")
  cartItems        CartItem[]
  orderItems       OrderItem[]
  audits           ProductAudit[]

  @@index([public])
  @@index([active])
  @@index([categoryId])
  @@index([featured])
  @@index([inStock])
  @@index([brandId, approvalStatus, active])
  @@index([approvalStatus])
  @@index([deletedAt])
}

model ProductAudit {
  id            String   @id @default(uuid())
  productId     String
  userId        String   // User who made the change
  action        String   // created, updated, approved, rejected, deleted
  fieldName     String?  // Field that was changed (e.g., "price", "name", "description")
  previousValue String?  // Previous value (as JSON string for flexibility)
  newValue      String?  // New value (as JSON string for flexibility)
  reason        String?  // Reason for change (e.g., rejection reason)
  metadata      Json?    // Additional context if needed
  createdAt     DateTime @default(now())
  
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id])

  @@index([productId])
  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

model Stream {
  id              String             @id @default(uuid())
  title           String
  description     String?
  scheduled       DateTime
  userId          String
  isLive          Boolean            @default(false)
  viewerCount     Int                @default(0)
  startedAt       DateTime?
  endedAt         DateTime?
  thumbnailUrl    String?
  streamUrl       String?
  streamKey       String?            @unique @default(cuid())
  vdoRoomId       String?            @unique // VDO.Ninja room identifier
  categoryId      String?
  tags            String[]           @default([])
  status          String             @default("scheduled") // scheduled, live, ended
  slowModeDelay   Int                @default(0) // Slow mode delay in seconds
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @default(now()) @updatedAt
  streamMessages  StreamMessage[]
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  category        Category?          @relation(fields: [categoryId], references: [id])
  products        StreamProduct[]
  streamViewers   StreamViewer[]
  moderations     ChatModeration[]
  moderators      StreamModerator[]
  analytics       StreamAnalytics[]
  realtimeStats   StreamRealtimeStats[]
  qualityEvents   StreamQualityEvent[]
  viewerAnalytics ViewerAnalytics[]

  @@index([userId])
  @@index([isLive])
  @@index([scheduled])
  @@index([categoryId])
  @@index([status])
  @@index([streamKey])
}

model StreamProduct {
  id        String  @id @default(uuid())
  streamId  String
  productId String
  order     Int     @default(0)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  stream    Stream  @relation(fields: [streamId], references: [id], onDelete: Cascade)

  @@unique([streamId, productId])
  @@index([streamId])
  @@index([productId])
}

model StreamMessage {
  id        String              @id @default(uuid())
  content   String
  userId    String
  streamId  String
  username  String?             // Cached username for faster display
  type      String              @default("message") // message, system, announcement, donation, subscription
  subType   String?             // For system messages: stream, viewer, quality, error, etc.
  metadata  Json?               // Extra data like donation amounts, subscriber tiers, etc.
  isPinned  Boolean             @default(false)
  isDeleted Boolean             @default(false)
  replyToId String?
  createdAt DateTime            @default(now())
  updatedAt DateTime            @default(now()) @updatedAt
  stream    Stream              @relation(fields: [streamId], references: [id], onDelete: Cascade)
  user      User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  replyTo   StreamMessage?      @relation("StreamMessageReplies", fields: [replyToId], references: [id])
  replies   StreamMessage[]     @relation("StreamMessageReplies")
  reactions MessageReaction[]

  @@index([streamId])
  @@index([userId])
  @@index([type])
  @@index([isPinned])
  @@index([createdAt])
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt

  @@index([userId])
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([cartId, productId])
  @@index([cartId])
  @@index([productId])
}

model Order {
  id              String      @id @default(uuid())
  orderNumber     String      @unique @default(cuid())
  userId          String
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  status          String      @default("pending") // pending, processing, shipped, delivered, cancelled
  paymentStatus   String      @default("unpaid") // unpaid, paid, refunded
  paymentMethod   String?
  subtotal        Float
  tax             Float       @default(0)
  shipping        Float       @default(0)
  total           Float
  shippingAddress Json?
  billingAddress  Json?
  notes           String?
  items           OrderItem[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @default(now()) @updatedAt

  @@index([userId])
  @@index([orderNumber])
  @@index([status])
  @@index([paymentStatus])
}

model OrderItem {
  id         String   @id @default(uuid())
  orderId    String
  productId  String
  quantity   Int
  price      Float
  total      Float
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@index([orderId])
  @@index([productId])
}

model StreamViewer {
  id         String   @id @default(uuid())
  streamId   String
  userId     String?
  sessionId  String   // For anonymous viewers
  ipAddress  String?
  userAgent  String?
  location   String?
  joinedAt   DateTime @default(now())
  leftAt     DateTime?
  stream     Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([streamId, sessionId])
  @@index([streamId])
  @@index([userId])
  @@index([joinedAt])
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([token])
  @@index([userId])
  @@index([expiresAt])
}

model Follow {
  id         String   @id @default(uuid())
  followerId String
  followingId String
  follower   User     @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following  User     @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model MessageReaction {
  id        String   @id @default(uuid())
  messageId String
  userId    String
  emoji     String   // The emoji used for reaction
  createdAt DateTime @default(now())
  message   StreamMessage  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, emoji])
  @@index([messageId])
  @@index([userId])
}

model ChatModeration {
  id          String   @id @default(uuid())
  streamId    String
  userId      String   // User being moderated
  moderatorId String   // Moderator who took action
  action      String   // 'timeout', 'ban', 'unban'
  reason      String?
  duration    Int?     // Duration in seconds for timeout
  expiresAt   DateTime? // When the moderation expires
  createdAt   DateTime @default(now())
  stream      Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  user        User     @relation("ModeratedUsers", fields: [userId], references: [id], onDelete: Cascade)
  moderator   User     @relation("ModeratorActions", fields: [moderatorId], references: [id], onDelete: Cascade)

  @@index([streamId])
  @@index([userId])
  @@index([expiresAt])
  @@index([action])
}

model StreamModerator {
  id        String   @id @default(uuid())
  streamId  String
  userId    String
  addedBy   String
  createdAt DateTime @default(now())
  stream    Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  user      User     @relation("StreamModeratorUser", fields: [userId], references: [id], onDelete: Cascade)
  addedByUser User   @relation("StreamModeratorAddedBy", fields: [addedBy], references: [id], onDelete: Cascade)

  @@unique([streamId, userId])
  @@index([streamId])
  @@index([userId])
}

// Better Auth Tables
model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@index([expiresAt])
}

model Account {
  id                      String    @id @default(uuid())
  userId                  String
  accountId               String
  providerId              String
  accessToken             String?
  refreshToken            String?
  accessTokenExpiresAt    DateTime?
  refreshTokenExpiresAt   DateTime?
  password                String?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @default(now()) @updatedAt
  user                    User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@index([userId])
}

model Verification {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@unique([identifier, value])
  @@index([identifier])
  @@index([expiresAt])
}

// Stream Analytics Models for VDO.Ninja Integration

model StreamAnalytics {
  id                String   @id @default(uuid())
  streamId          String
  stream            Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  
  // Time window
  timestamp         DateTime @default(now())
  intervalType      String   // 'minute', '5minutes', '15minutes', 'hour', 'day'
  intervalStart     DateTime
  intervalEnd       DateTime
  
  // Viewer metrics
  uniqueViewers     Int      @default(0)
  peakViewers       Int      @default(0)
  averageViewers    Float    @default(0)
  totalViewTime     Int      @default(0) // in seconds
  averageViewTime   Float    @default(0) // in seconds
  
  // Stream quality metrics
  averageFps        Float    @default(0)
  minFps            Float    @default(0)
  maxFps            Float    @default(0)
  averageBitrate    Float    @default(0) // in bps
  minBitrate        Float    @default(0)
  maxBitrate        Float    @default(0)
  averageResolution String?  // e.g., "1920x1080"
  
  // Network metrics
  averageLatency    Float    @default(0) // in ms
  maxLatency        Float    @default(0)
  averagePacketLoss Float    @default(0) // percentage
  maxPacketLoss     Float    @default(0)
  averageJitter     Float    @default(0) // in ms
  
  // Connection health
  connectionScore   Float    @default(100) // 0-100
  qualityRating     String   @default("good") // 'excellent', 'good', 'fair', 'poor', 'critical'
  reconnectCount    Int      @default(0)
  
  // Data usage
  totalBytesOut     BigInt   @default(0)
  totalBytesIn      BigInt   @default(0)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt
  
  @@unique([streamId, intervalType, intervalStart])
  @@index([streamId])
  @@index([intervalType])
  @@index([intervalStart])
  @@index([timestamp])
}

model StreamRealtimeStats {
  id                String   @id @default(uuid())
  streamId          String
  stream            Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  
  // Timestamp for this stats snapshot
  timestamp         DateTime @default(now())
  
  // Current viewers
  viewerCount       Int      @default(0)
  
  // Video stats
  fps               Float    @default(0)
  resolution        String?  // e.g., "1920x1080"
  bitrate           Float    @default(0) // in bps
  
  // Audio stats
  audioLevel        Float    @default(0) // 0-100
  audioDropouts     Int      @default(0)
  
  // Network stats
  latency           Float    @default(0) // in ms
  packetLoss        Float    @default(0) // percentage
  jitter            Float    @default(0) // in ms
  uploadSpeed       Float    @default(0) // in bps
  downloadSpeed     Float    @default(0) // in bps
  
  // Connection
  connectionState   String   @default("connected") // 'connected', 'reconnecting', 'disconnected'
  connectionQuality String   @default("good") // 'excellent', 'good', 'fair', 'poor', 'critical'
  
  // Media states
  isAudioMuted      Boolean  @default(false)
  isVideoHidden     Boolean  @default(false)
  isScreenSharing   Boolean  @default(false)
  isRecording       Boolean  @default(false)
  
  createdAt         DateTime @default(now())
  
  @@index([streamId])
  @@index([timestamp])
  @@index([createdAt])
}

model StreamQualityEvent {
  id                String   @id @default(uuid())
  streamId          String
  stream            Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  
  timestamp         DateTime @default(now())
  eventType         String   // 'quality_degraded', 'quality_improved', 'connection_lost', 'connection_restored'
  severity          String   // 'low', 'medium', 'high', 'critical'
  
  // Event details
  metric            String   // 'fps', 'bitrate', 'latency', 'packet_loss', 'connection'
  previousValue     Float?
  currentValue      Float?
  threshold         Float?
  
  // Context
  message           String?
  details           Json?    // Additional context as JSON
  
  // Resolution
  resolved          Boolean  @default(false)
  resolvedAt        DateTime?
  resolutionTime    Int?     // Time to resolve in seconds
  
  createdAt         DateTime @default(now())
  
  @@index([streamId])
  @@index([eventType])
  @@index([severity])
  @@index([timestamp])
  @@index([resolved])
}

model ViewerAnalytics {
  id                String   @id @default(uuid())
  streamId          String
  userId            String?
  sessionId         String   // For anonymous viewers
  
  stream            Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  user              User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Session info
  joinedAt          DateTime
  leftAt            DateTime?
  totalWatchTime    Int      @default(0) // in seconds
  
  // Engagement metrics
  chatMessageCount  Int      @default(0)
  reactionCount     Int      @default(0)
  
  // Quality experience
  averageQuality    String?  // Average quality watched
  qualityChanges    Int      @default(0) // Number of quality changes
  bufferingTime     Int      @default(0) // Total buffering time in seconds
  bufferingEvents   Int      @default(0)
  
  // Connection metrics
  averageLatency    Float    @default(0)
  averagePacketLoss Float    @default(0)
  reconnectCount    Int      @default(0)
  
  // Device info
  deviceType        String?  // 'desktop', 'mobile', 'tablet'
  browser           String?
  os                String?
  location          String?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt
  
  @@unique([streamId, sessionId])
  @@index([streamId])
  @@index([userId])
  @@index([sessionId])
  @@index([joinedAt])
}
